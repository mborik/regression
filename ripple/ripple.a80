		device	zxspectrum128

@DEBUG = 0

		include "../kernel/constants.inc"
		include "mandaly/build.inc"

;;-----------------------------------------------------------------------------
	macro border n
	  if DEBUG
	    if n > 0
		ld	a,n
	    else
		xor	a
	    endif
		out	(254),a
	  endif
	endm

;;-----------------------------------------------------------------------------

		org	RUNZONE

start:		ei
		ld	a,#1D
		call	xchg.bnk-3
		ld	hl,mandala.attr0
		call	blitattrs
		ld	iy,drawsq

loop:		ei
		halt
		call	citajScenar
		call	xchg.vram
		call	render
		ei
		halt
		call	citajScenar
		call	xchg.vram
		call	render2
		jr	loop

;; ~ RENDER ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

render:		ld	a,#44
.ptr		ld	de,#0000
.xor		ld	hl,xorbuffer
		out	(mb02ram),a

.core		di
		ld	(.retsp+1),sp
.i = 16
	dup 176
		ld	a,(de)
		or	a
		jr	z,$+15
		xor	(hl)
		ld	(hl),a
		exx
.y = (.i & #F0) >> 1
		ld	de,#C000 | (((.y & #C0) | ((.y & #38) >> 3) | ((.y & 7) << 3)) << 5) | (.i & 15)
		ld	ix,$+6
		jp	(iy)
		exx
.i = .i + 1
		inc	de
		inc	l
	edup
		org	$-1
.retsp:		ld	sp,0
		ei
		ret

render2:	ld	a,(render+1)
		inc	a
		ld	de,(render.ptr+1)
		ld	hl,(render.xor+1)
		inc	h
		call	render.core
		ld	(render.ptr+1),de
		ld	hl,#3FF0
		xor	a
		sbc	hl,de
		ret	nz
		ld	(render.ptr+1),hl
		ld	hl,render+1
		ld	a,(hl)
		inc	a
		inc	a
		ld	(hl),a
		cp	#48
		ret	nz
		ld	a,#44
		ld	(hl),a
		ret

drawsq:		ld	h,high patterns.tab
		ld	l,a
		ld	a,(hl)
		inc	h
		ld	h,(hl)
		ld	l,a
		ld	sp,hl
		ld	h,d
		ld	l,e
	dup 4
		pop	bc
		ld	(hl),c
		inc	h
		ld	(hl),b
		inc	h
	edup
		org	$-1
		ld	h,d
		ld	a,31
		xor	e
		ld	l,a
		ld	e,a
	dup 4
		pop	bc
		ld	(hl),c
		inc	h
		ld	(hl),b
		inc	h
	edup
		org	$-1
.third		ld	hl,#90FF
		sbc	hl,de
		ld	d,h
	dup 4
		pop	bc
		ld	(hl),c
		inc	h
		ld	(hl),b
		inc	h
	edup
		org	$-1
		ld	h,d
		ld	a,l
		xor	31
		ld	l,a
	dup 4
		pop	bc
		ld	(hl),c
		inc	h
		ld	(hl),b
		inc	h
	edup
		org	$-1
		jp	(ix)

fillattrs:	ld	a,b
		ld	d,a
		ld	e,a
		rrca
		rrca
		rrca
		and	7
		ld	(actborder),a
		out	(254),a
		ld	a,(act128page)
		ld	bc,page128
		push	bc
		push	af
		and	#F8
		or	7
		out	(c),a
		di
		ld	(.rstsp+1),sp
		ld	hl,#D880
.secvram:	ld	b,6
.loop:		ld	sp,hl
	dup 64
		push	de
	edup
		ld	hl,#0100
		add	hl,sp
		djnz	.loop
		ld	hl,#7E00
		add	hl,sp
		jr	c,.secvram
.rstsp:		ld	sp,0
		pop	af
		pop	bc
		out	(c),a
		ei
		ret

citajScenar:	di
		ld	(.retsp+1),sp
.ptr:		ld	sp,scenar
		ld	hl,(FRAMES)
		pop	de
		sbc	hl,de
		jr	c,.retsp
		pop	bc
		ld	a,c
		dec	a
		jr	nz,.otherfns
; fn 1
		pop	hl
.xorxor		ld	de,xorbuffer
		ld	bc,xorbuffer + 256
		ld	a,44
.xorloop:	ex	af,af'
	dup 4
		ld	a,(de)
		xor	(hl)
		ld	(de),a
		ld	a,(bc)
		xor	(hl)
		ld	(bc),a
		inc	hl
		inc	e
		inc	c
	edup
		ex	af,af'
		dec	a
		jr	nz,.xorloop
		pop	hl
		ld	a,h
		or	l
		jr	nz,.xorxor
		ld	(.ptr+1),sp
		ld	sp,(.retsp+1)
		ei
		halt
		ret

.retsp:		ld	sp,0
		ei
		ret

.otherfns:	dec	a
		jr	z,.fillattrs
		dec	a
		jr	z,.blitattrs

; fn 0
.fin:		ld	sp,(.retsp+1)
		pop	af
		ret

; fn 2
.fillattrs:	ld	(.ptr+1),sp
		ld	sp,(.retsp+1)
		jp	fillattrs

; fn 3
.blitattrs:	pop	hl
		ld	(.ptr+1),sp
		ld	sp,(.retsp+1)

blitattrs:	ld	a,(hl)
		rrca
		rrca
		rrca
		and	7
		ld	(actborder),a
		out	(254),a
		ld	a,(act128page)
		ld	bc,page128
		push	bc
		push	af
		and	#F8
		or	7
		out	(c),a
		di
		push	hl
		ld	de,#D800
		ld	bc,768
		ldir
		pop	hl
		ld	de,#5800
		ld	bc,768
		ldir
		pop	af
		pop	bc
		out	(c),a
		ei
		halt
		ret

;;-----------------------------------------------------------------------------
	macro flash frames, color
		dw	frames
		db	2, color
	endm

	macro bltattr frames, ptr
		dw	frames
		db	3, 0
		dw	ptr
	endm

	macro xormnd frames, mandala
		dw	frames
		db	1, 0
		dw	mandala
		dw	0
	endm

	macro xorrep frames, mandala1, mandala2
		dw	frames
		db	1, 0
		dw	mandala1
		dw	mandala2
		dw	0
	endm

scenar		flash	6451, 0q27
		flash	6453, 0q37
		flash	6455, 0q57
		flash	6457, 0q67
		flash	6459, 0q77

		bltattr	6460, mandala.attr2

		flash	6627, 0q27
		flash	6629, 0q37
		flash	6631, 0q57
		flash	6633, 0q67
		flash	6635, 0q77

		xormnd	6636, mandala.no1
		bltattr	6638, mandala.attr1

		flash	6979, 0q27
		flash	6981, 0q37
		flash	6983, 0q57
		flash	6985, 0q67
		flash	6987, 0q77

		xorrep	6988, mandala.no1, mandala.no3
		bltattr	6990, mandala.attr3
;;--
		flash	7012, 0q70
		bltattr	7018, mandala.attr3

		flash	7054, 0q77
		xormnd	7056, mandala.no3
		flash	7058, 0q06
;;--
		flash	7100, 0q70
		flash	7106, 0q06

		flash	7142, 0q77
		xormnd	7144, mandala.no4
		bltattr	7146, mandala.attr0
;;--
		flash	7188, 0q70
		bltattr	7194, mandala.attr0

		flash	7231, 0q77
		xorrep	7233, mandala.no4, mandala.no5
		bltattr	7235, mandala.attr2
;;--
		flash	7276, 0q70
		bltattr	7282, mandala.attr2

		flash	7318, 0q77
		xorrep	7320, mandala.no5, mandala.no2
		flash	7322, 0q15

		flash	7364, 0q70
		flash	7370, 0q26

		flash	7406, 0q77
		xormnd	7408, mandala.no2
		flash	7410, 0q37

		flash	7452, 0q72
		flash	7458, 0q46

		flash	7496, 0q73
		flash	7502, 0q57

		flash	7540, 0q75
		flash	7546, 0q65

		flash	7584, 0q77

		dw	7586
		dw	0,0 ; fin


;;-----------------------------------------------------------------------------
		align	256

patterns.gfx	incbin "gfx/patterns.bin"

patterns.tab:
.i = 0
	dup 256
		db	low (patterns.gfx + (.i * 32))
.i = .i + 1
	edup
.i = 0
	dup 256
		db	high (patterns.gfx + (.i * 32))
.i = .i + 1
	edup

xorbuffer:	block	512,0

		savebin "final.bin",start,$-start
