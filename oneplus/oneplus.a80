		device	zxspectrum128

@DEBUG = 0

		include "../kernel/constants.inc"

;;-----------------------------------------------------------------------------
	macro border n
	  if DEBUG
	    if n > 0
		ld	a,n
	    else
		xor	a
	    endif
		out	(254),a
	  endif
	endm

;;-----------------------------------------------------------------------------

		org	RUNZONE
		define	MUSIC.waitfor 1417

@bufdat = #BEBA
@odkalisko = bufdat - 6912

begin:
	ifndef isFX
		ld	hl,initscreen
		ld	de,#4000
		call	depack
	endif
		ld	a,#17
		call	xchg.bnk
		ei
		halt

		ld	a,#38
		ld	hl,#D800
		ld	de,#D801
		ld	bc,#2FF
		ld	(hl),#38
		ldir
		ld	hl,credit.n1ko.flash
		ld	de,#C000
		call	depack
		ld	a,#10
		call	xchg.bnk

		ld	hl,bufdat
		ld	b,75
		call	slucka
		ld	hl,bufdat
		ld	b,75
		call	slucka
		ld	hl,bufdat
		ld	b,23+26
		call	slucka

		push	hl
		ld	hl,credit.n1ko
		ld	de,credit.support.flash
		ld	b,77
		call	showcredit
		pop	hl

		ld	b,26
		call	slucka
		ld	hl,bufdat
		ld	b,75
		call	slucka
		ld	hl,bufdat
		ld	b,75
		call	slucka
		ld	hl,bufdat
		ld	b,23
		call	slucka

		push	hl
		ld	hl,credit.support
		ld	de,credit.mbr.flash
		ld	b,100
		call	showcredit
		pop	hl

		ld	b,26+26
		call	slucka
		ld	hl,bufdat
		ld	b,75
		call	slucka
		ld	hl,bufdat
		ld	b,75
		call	slucka

		push	hl
		ld	hl,credit.mbr
		ld	de,vyblikator.gfx
		ld	b,111
		call	showcredit
		pop	hl

.vyblik:	ei
		halt
		call	vyblikator
		jr	nz,.vyblik

		ld	hl,#5800
		ld	de,#5801
		ld	bc,#2FF
		ld	(hl),7
		ldir

		ld	bc,2497
.waitfswish:	ei
		halt
		ld	hl,(FRAMES)
		xor	a
		sbc	hl,bc
		jr	c,.waitfswish

.stvorcek:	ei
		halt
		call	stvorcekani
		jr	nz,.stvorcek
		ret

showcredit:	push	de
		push	bc
		push	hl
		ld	a,#07
		ld	(actborder),a
		out	(254),a
		xor	#1A
		ld	(xchg.vram+1),a
		call	xchg.bnk
		halt
		halt
		halt
		ld	hl,#4000
		ld	de,odkalisko
		ld	bc,#1B00
		ldir
		pop	hl
		ld	de,#C000
		call	depack
		xor	a
		ld	(actborder),a
		out	(254),a
		call	xchg.vram
		pop	bc
		call	waitf
		ld	a,#07
		ld	(actborder),a
		out	(254),a
		call	xchg.vram
		halt
		halt
		halt
		ld	hl,odkalisko
		ld	de,#4000
		ld	bc,#1B00
		ldir
		halt
		xor	a
		ld	(actborder),a
		out	(254),a
		ld	a,#17
		call	xchg.bnk
		halt
		pop	hl
		ld	de,#C000
		call	depack
		ld	a,#10
		jp	xchg.bnk

slucka:		ei
		halt
		ld	a,(hl)
		dec	a
		ret	z
		push	bc
		border	1
		call	play
		border	0
		pop	bc
		inc	hl
		djnz	slucka
		ret

waitf:
.loop		ei
		halt
		djnz	.loop
		ret

vyblikator:	ld	hl,.table
		ld	a,(hl)
		or	a
		ret	z
		ld	c,a
		inc	l
		ld	b,(hl)
		inc	l
		ex	hl,de
		ld	hl,(FRAMES)
		xor	a
		sbc	hl,bc
		ret	c
		ld	(vyblikator+1),de
		ld	a,(act128page)
		xor	8
		ld	(act128page),a
		ret

.table:	;	dw	2376, 2376 + 3
		dw	2398, 2398 + 3
		dw	2420, 2420 + 3
		dw	2442, 2442 + 3
		dw	2464, 2464 + 3
		dw	0

play0:		call	drawchunk
play:		ld	a,(hl)
		and	#1F
		sub	#08
		inc	a
		jr	z,linearchunk
		ret	m
		add	a,#3F
		ld	d,a
		ld	a,(hl)
		inc	hl
		ld	e,(hl)
		inc	hl
		and	#E0
		jr	nz,play0
		ld	a,(hl)
		and	#1F
		ld	b,a
		ld	a,(hl)
		inc	hl
		ld	c,(hl)
		inc	hl
		push	hl
		sbc	hl,bc
		call	drawchunk
		pop	hl
		jr	play

drawchunk:	rrca
		rrca
		rrca
		cpl
		and	#1C
		ld	c,a
		rrca
		rrca
		add	a,c
		ld	($+4),a
		jr	$
	dup 8
		ld	a,(de)
		xor	(hl)
		ld	(de),a
		inc	hl
		inc	d
	edup
		org	$-1
		ret

linearchunk:	ld	a,(hl)
		and	#E0
		rrca
		add	a,#10
		rrca
		rrca
		rrca
		ld	b,a
		inc	hl
		ld	e,(hl)
		inc	hl
		ld	a,#40
		add	a,(hl)
		ld	d,a
.loop:		inc	hl
		ld	a,(de)
		xor	(hl)
		ld	(de),a
		inc	e
		djnz	.loop
		inc	hl
		jr	play

stvorcekani:	ld	hl,stvorcekani.table
		ld	a,(hl)
		or	a
		ret	z
		ld	c,a
		inc	hl
		ld	b,(hl)
		inc	hl
		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		inc	hl
		ld	(stvorcekani+1),hl
		exx
		ld	(.retsp+1),sp
		di
		ld	sp,#5000
		ld	de,0
		ld	b,32
.clear:	dup 32
		push	de
	edup
		djnz	.clear
.retsp:		ld	sp,0
		exx
		ei

; c=x1 < e=x2, b=y1 < d=y2
kvadro:		ld	a,d
		sub	b
		inc	a
		ld	d,a
		ld	a,c
		and	#F8
		ld	xh,a
		ld	a,e
		and	#F8
		cp	xh
		ld	xh,b
		jr	nz,.r2
		call	addbod
		ld	b,a
		ld	a,#FF
		jr	z,.lbrdnone1
.lbrdloop1:	srl	a
		djnz	.lbrdloop1
.lbrdnone1:	ld	c,a
		ld	a,e
		and	7
		ld	b,a
		ld	a,#80
		jr	z,.rbrdnone1
.rbrdloop1:	scf
		rra
		djnz	.rbrdloop1
.rbrdnone1:	and	c
		ld	e,a
		ld	a,xh
		cpl
		and	7
		inc	a
		ld	b,a
.zv1:		ld	(hl),e
		inc	h
		dec	d
		jr	z,.nzret
		djnz	.zv1
		ld	b,8
		ld	a,#20
		add	a,l
		ld	l,a
		jr	c,.zv1
		ld	a,#F8
		add	a,h
		ld	h,a
		jr	.zv1

.nzret:		or	h
		ret

.r2:		dec	a
		sub	c
		rrca
		rrca
		rrca
		and	#1F
		inc	a
		ld	(.kvainc+1),a
		call	addbod
		ld	b,a
		ld	a,#FF
		jr	z,.lbrdnone2
.lbrdloop2:	srl	a
		djnz	.lbrdloop2
.lbrdnone2:	ld	(.kvazac+1),a
		ld	a,e
		and	7
		ld	b,a
		inc	b
		xor	a
.rbrdloop2:	scf
		rra
		djnz	.rbrdloop2
		ld	(.kvaend+1),a
		ld	a,xh
		cpl
		and	7
		inc	a
		ld	b,a

.kva11:		push	hl
.kvazac:	ld	a,#FF
		ld	(hl),a
.kvainc:	ld	e,0
		inc	l
		dec	e
		jr	z,.kvaend
		or	#FF
.kvaline:	ld	(hl),a
		inc	l
		dec	e
		jr	nz,.kvaline
.kvaend:	ld	a,#FF
		ld	(hl),a
		pop	hl
		inc	h
		dec	d
		jr	z,.nzret
		djnz	.kva11
		ld	b,8
		ld	a,#20
		add	a,l
		ld	l,a
		jr	c,.kva11
		ld	a,#F8
		add	a,h
		ld	h,a
		jr	.kva11

addbod:		ld	h,high scradrtab
		ld	l,b
		ld	a,c
		rrca
		rrca
		rrca
		and	#1F
		or	(hl)
		inc	h
		ld	h,(hl)
		ld	l,a
		ld	a,c
		and	7
		ret

stvorcekani.table:
		include "stvorcek.path.inc"
		dw	0

vyblikator.gfx:	incbin "../reglogo/gfx/vyblikator.pak"

credit:
.n1ko:		incbin "gfx/credit_n1ko.pak"
.n1ko.flash:	incbin "gfx/credit_n1ko_flash.pak"
.support:	incbin "gfx/credit_support.pak"
.support.flash:	incbin "gfx/credit_support_flash.pak"
.mbr:		incbin "gfx/credit_mbr.pak"
.mbr.flash:	incbin "gfx/credit_mbr_flash.pak"

		align	256
scradrtab:
.i = 0
	dup 256
		db	((((.i & #C0) | ((.i & #38) >> 3) | ((.i & 7) << 3)) << 5) & #FF)
.i = .i + 1
	edup
.i = 0
	dup 256
		db	((((.i & #C0) | ((.i & #38) >> 3) | ((.i & 7) << 3)) << 5) >> 8) | #40
.i = .i + 1
	edup


;;-----------------------------------------------------------------------------

	ifndef isFX
initscreen:	incbin "gfx/oneplusani000.scr.pak"
	else
		savebin "final.bin",begin,$-begin
	endif

;;-----------------------------------------------------------------------------
	ifndef isFX
		slot 3
		page 6

		include "../kernel/kernel.micro.inc"

		slot 3
		page 0

		org	bufdat
		incbin	"oneplusani.ani.bin"

		savesna "oneplus.sna",microkernel
	endif
