		device	zxspectrum128

@DEBUG = 0

		include "../kernel/constants.inc"

@col.Risk	= 0 * 1638
@col.Variable	= 1 * 1638
@col.Negative	= 2 * 1638
@col.Linear	= 3 * 1638
@col.Unresolved	= 4 * 1638
@col.Analysis	= 5 * 1638
@col.Estimated	= 6 * 1638
@col.Positive	= 7 * 1638
@col.Moment	= 8 * 1638
@col.Dependent	= 9 * 1638

;;-----------------------------------------------------------------------------
	macro border n
	  if DEBUG
	    if n > 0
		ld	a,n
	    else
		xor	a
	    endif
		out	(254),a
	  endif
	endm

;;-----------------------------------------------------------------------------
		org	RUNZONE

start:		ld	a,#58	; SRAM page (RO)
		out	(mb02ram),a

.loop:		ei
		halt
		call	citajScenar
		call	xchg.vram
		call	render
.pass2end	jr	.loop

		ld	a,#5E
		out	(mb02ram),a
		call	animator
		ld	a,#5F
		out	(mb02ram),a
		call	animator
		ld	a,#40 ; back to ROM
		out	(mb02ram),a

		ld	a,#1D
		call	xchg.bnk-3
		ei
		ld	hl,stvorcek.pack
		ld	de,#C000
		call	depack
		halt
		call	xchg.vram
		ld	hl,vyblik.pack
		ld	de,#C000
		call	depack
		ld	a,#10
		call	xchg.bnk
.squarer:	ei
		halt
		call	squarer
		jr	nz,.squarer
		ei
		ld	hl,vyblikator
		ld	de,vyblikator.start
		push	de
		ld	bc,vyblikator.length
		ldir
		pop	hl
		ld	(IMCALL+1),hl
		ld	a,#CD
		ld	(IMCALL),a
		ret

render:		ei
.makeblik	ld	bc,makeblik
		border	6
.ph.Risk:	ld	bc,let.Risk
.ph.Variable:	ld	bc,let.Variable
.ph.Negative:	call	let.Negative
.ph.Linear:	ld	bc,let.Linear
.ph.Unresolved:	ld	bc,let.Unresolved
.ph.Analysis:	ld	bc,let.Analysis
.ph.Estimated:	ld	bc,let.Estimated
.ph.Positive:	call	let.Positive
.ph.Moment:	ld	bc,let.Moment
.ph.Dependent:	ld	bc,let.Dependent
.maznak:	ld	bc,maznak
		border	7
		ret

makeblik:	ld	a,1
		ld	de,#3838
		dec	a
		jr	z,.end
		ld	(makeblik+1),a
		dec	a
		jr	z,.blit

.permanent0:	ld	de,#7878
.blit:		di
		ld	hl,0
		add	hl,sp
		ld	sp,#D9A0
	dup 32
		push	de
	edup
		ld	sp,hl
		ei
		ret

.permanent1:	xor	a
		ld	(actborder),a
		ld	de,#7878
.end		pop	iy
		inc	a
		ld	(iy-3),a
		push	iy
		jr	.blit

citajScenar:	di
		ld	(.retsp+1),sp
.ptr:		ld	sp,scenar
		pop	de
		ld	a,e
		or	d
		jr	z,.retsp
		ld	hl,(FRAMES)
		sbc	hl,de
		jr	c,.retsp
		pop	hl
		pop	de
		pop	bc
		ld	(.ptr+1),sp
		ld	(hl),c
		ex	hl,de
		ld	(hl),b
.retsp:		ld	sp,0
		ei
		ret

squarer:	di
		ld	(.retsp+1),sp
.ptr:		ld	sp,squarer.data
		pop	de
		ld	a,e
		or	d
		jr	z,.retsp
		ld	bc,#FFFF
		ld	hl,(FRAMES)
		sbc	hl,de
		jr	c,.exit
		pop	hl
		pop	de
		ld	(.ptr+1),sp
		bit	6,d
		jr	z,.nobottom
		ld	sp,hl
		push	bc
		push	bc
		push	bc
		push	bc
		ex	hl,de
.nobottom:	ld	sp,hl
		push	bc
		push	bc
		push	bc
		push	bc
.exit:		or	c
.retsp:		ld	sp,0
		ret

scenar:		dw	880
		dw	render.makeblik
		dw	makeblik+1
		db	#CD,9 ; pocet svietivych framov

		dw	902
		dw	render.ph.Variable
		dw	render.ph.Estimated
		db	#CD,#CD

		dw	968
		dw	render.ph.Risk
		dw	render.ph.Analysis
		db	#CD,#CD

		dw	969
		dw	render.makeblik
		dw	makeblik+1
		db	#CD,16

		dw	1012
		dw	render.makeblik
		dw	makeblik+1
		db	#CD,11

		dw	1034
		dw	render.ph.Linear
		dw	render.ph.Moment
		db	#CD,#CD

		dw	1056
		dw	render.makeblik
		dw	makeblik+1
		db	#CD,11

		dw	1100
		dw	render.ph.Unresolved
		dw	render.ph.Dependent
		db	#CD,#CD

		dw	1101
		dw	render.makeblik
		dw	makeblik+1
		db	#CD,16

		dw	1122
		dw	render.makeblik
		dw	makeblik+1
		db	#CD,11

		dw	1144
		dw	render.makeblik
		dw	makeblik+1
		db	#CD,11

		dw	1166
		dw	render.makeblik
		dw	render.makeblik + 1
		db	#CD,low makeblik.permanent0

		dw	1167
		dw	render.maznak
		dw	render.makeblik + 1
		db	#CD,low makeblik.permanent1

		dw	1190
		dw	start.pass2end
		dw	start.pass2end + 1
		dw	0
		dw	0

;;-----------------------------------------------------------------------------
let.Risk:	ld	hl,prilet.up
		ld	de,col.Risk
		ld	c,1
		call	prilet
		jr	z,let.disable
		ld	(let.Risk+1),hl
		ret

let.Variable:	ld	hl,prilet.down
		ld	de,col.Variable
		ld	c,4
		call	prilet
		jr	z,let.disable
		ld	(let.Variable+1),hl
		ret

let.Negative:	ld	hl,prilet.up
		ld	de,col.Negative
		ld	c,7
		call	prilet
		jr	z,let.disable
		ld	(let.Negative+1),hl
		ret

let.Linear:	ld	hl,prilet.down
		ld	de,col.Linear
		ld	c,10
		call	prilet
		jr	z,let.disable
		ld	(let.Linear+1),hl
		ret

let.Unresolved:	ld	hl,prilet.up
		ld	de,col.Unresolved
		ld	c,13
		call	prilet
		jr	z,let.disable
		ld	(let.Unresolved+1),hl
		ret

let.disable:	pop	iy
		inc	a
		ld	(iy-3),a
		jp	(iy)

let.Analysis:	ld	hl,prilet.down
		ld	de,col.Analysis
		ld	c,16
		call	prilet
		jr	z,let.disable
		ld	(let.Analysis+1),hl
		ret

let.Estimated:	ld	hl,prilet.up
		ld	de,col.Estimated
		ld	c,19
		call	prilet
		jr	z,let.disable
		ld	(let.Estimated+1),hl
		ret

let.Positive:	ld	hl,prilet.down
		ld	de,col.Positive
		ld	c,22
		call	prilet
		jr	z,let.disable
		ld	(let.Positive+1),hl
		ret

let.Moment:	ld	hl,prilet.up
		ld	de,col.Moment
		ld	c,25
		call	prilet
		jr	z,let.disable
		ld	(let.Moment+1),hl
		ret

let.Dependent:	ld	hl,prilet.down
		ld	de,col.Dependent
		ld	c,28
		call	prilet
		jr	z,let.disable
		ld	(let.Dependent+1),hl
		ret

maznak:		ld	hl,maznak.addrs
		ld	a,(hl)
		or	a
		jr	z,let.disable
		ld	bc,-1
		ld	(.retsp+1),sp
		di
.loop:		ld	e,a
		inc	hl
		ld	d,(hl)
		ex	hl,de
		inc	hl
		ld	sp,hl
	dup 16
		push	bc
	edup
		ex	hl,de
		inc	hl
		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		ex	hl,de
		inc	hl
		ld	sp,hl
	dup 16
		push	bc
	edup
		ex	hl,de
		inc	hl
		ld	a,(hl)
		or	a
		jr	nz,.loop
		inc	hl
		ld	(maznak+1),hl
.retsp:		ld	sp,0
		ei
		ret

prilet:		ld	a,(hl)
		or	a
		ret	z
		inc	l
		ld	b,(hl)
		inc	l
		push	hl
		ld	l,a
		ld	h,b
		add	hl,de
		ex	hl,de
		ld	b,0
		include "tables/view.scradrtab.a80"
		org	$-4
		nop
		pop	hl
		or	h ; = nz
		ret

animator:	ld	b,32
.loop:		ei
		halt
		push	bc
		call	xchg.vram
		call	.draw
		pop	bc
		djnz	.loop
		ret

.draw:		ld	hl,0
		ld	(.retsp+1),sp
		di
		ld	sp,hl
		include "tables/animator.a80"
		ld	hl,0
		add	hl,sp
		res	6,h
		ld	(.draw+1),hl
.retsp:		ld	sp,0
		ret

maznak.addrs:	include "tables/maznak.a80"

squarer.data:	include "tables/squarer.a80"

stvorcek.pack:	incbin "gfx/stvorcek.pak"
vyblik.pack:	incbin "gfx/vyblikator.pak"

;;-----------------------------------------------------------------------------
		align	256
prilet.up:	include "tables/prilet.up.a80"

vyblikator:
	phase #8000
.start:		ld	hl,.table
		ld	a,(hl)
		or	a
		jr	z,.end
		ld	c,a
		inc	l
		ld	b,(hl)
		inc	l
		ex	hl,de
		ld	hl,(FRAMES)
		xor	a
		sbc	hl,bc
		ret	c
		ld	(.start+1),de
		ld	a,(act128page)
		xor	8
		ld	(act128page),a
		ret

.end:		ld	hl,IMCALL
		ld	(hl),a
		inc	l
		ld	(hl),a
		inc	l
		ld	(hl),a
		ret

.table:		dw	1342, 1342 + 3
		dw	1364, 1364 + 3
		dw	1386, 1386 + 3
		dw	1408, 1408 + 3
		dw	0

.length = $-.start
	dephase

		align	256
prilet.down:	include "tables/prilet.down.a80"


		savebin "final.bin",start,$-start
