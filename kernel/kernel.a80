		device	zxspectrum128


needle1 	= 1 + #10
needle3 	= 3 + #10
needle4 	= 4 + #10
needle6 	= 6 + #10
needle7 	= 7 + #10
numberOfNeedles = 5

		include "pg1fx.inc"
		include "pg3fx.inc"
		include "pg4fx.inc"
		include "pg6fx.inc"
		include "pg7fx.inc"


page128		equ	#7FFD
act128page	equ	#5B5C
actborder	equ	#5C48
FRAMES		equ	23672
divmmcpg	equ	#E3


		define OUTPUT_TAP "../build/REGRESSION.tap"
		emptytap OUTPUT_TAP


		org	#8000

	opt listact
	module loader
@start

;; TAPE LOADER
;;-----------------------------------------------------------------------------
begin:		ld	hl,screen.pak
		ld	de,#4000
		jp	depack

processblock:	di
		ld	hl,#8400
		ld	de,#C000
		call	depack
.blktabptr:	ld	hl,blocktable
.targetpg:	ld	bc,(blocktable.firstct << 8) | 8 ; DivMMC page 8
.depk6:		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		inc	hl
		push	hl
		ex	hl,de
		ld	de,#2000
		ld	a,c
		inc	c
		push	bc
		out	(divmmcpg),a	; switch bank
		call	depack

.prgsx:		ld	a,1
		xor	1
		jr	z,.prgsxz
.prgptr:	ld	hl,#50A1
		ld	(hl),#FF	; draw progress
		inc	l
		ld	(.prgptr+1),hl
.prgsxz:	ld	(.prgsx+1),a

		pop	bc
		pop	hl
		djnz	.depk6
		ld	(.blktabptr+1),hl

.countptr:	ld	hl,blocktable.counts
		ld	b,(hl)
		inc	hl
		ld	(.countptr+1),hl
		xor	a
		out	(divmmcpg),a
		or	b
		jr	z,fullfilprg
		ld	(.targetpg+1),bc
		ret

fullfilprg:	ld	hl,(processblock.prgptr+1)
.loop:		ld	a,l
		cp	#BF
		ret	z
		ld	(hl),#FF
		inc	l
		jr	.loop

unpackpage:	ld	hl,#51A1
		ld	bc,((30 / numberOfNeedles) << 8) | #FF
.pgprog:	ld	(hl),c	; draw progress
		inc	l
		djnz	.pgprog
		ld	(unpackpage+1),hl
		di
		ld	hl,#8400
		ld	de,#C000
		jr	depack

fadeoutandrun	ld	b,25
.loop:		ei
		halt
		halt
		push	bc
		call	attrhide
		pop	bc
		djnz	.loop
		jp	kernel


	if $ > #80B6
		display "Too long! ",/D,($-#80B6)," bytes out!"
	else
		display /D,(#80B6-$)," bytes free..."
	endif

		org	#80B6

@xchg.vram:	ld	a,#1D
		xor	#0A
		ld	(xchg.vram+1),a
@xchg.bnk:	ld	(act128page),a
		ld	bc,page128
		out	(c),a
		ret

@depack:	module dzx0
		opt push listoff
		include "dzx0.a80"
		opt pop
		endmod

;;- INTERRUPT -----------------------------------------------------------------
		org	#8181

interrupt:	push	af		; demo-wide interrupt handler
		ld	a,(actborder)
		out	(254),a
		push	bc
		push	de
		push	hl
		exx
		ex	af,af'
		push	ix
		push	iy
		push	af
		push	bc
		push	de
		push	hl

@IMCALL		db	0,0,0

		ld	a,(act128page)
		push	af
		and	$F8		; we keep active VRAM paged
		or	MUSIC.page	; and switch bank just for music
		ld	bc,page128
		out	(c),a
		call	MUSIC.play
		pop	af
		ld	bc,page128
		out	(c),a

		ld	hl,(FRAMES)
		inc	hl
		ld	(FRAMES),hl

		pop	hl
		pop	de
		pop	bc
		pop	af
		pop	iy
		pop	ix
		ex	af,af'
		exx
		pop	hl
		pop	de
		pop	bc
		pop	af
		ei
		ret


fxtable:	db	fx_city.pg
		dw	fx_city
		dw	fx_city.sync

		db	fx_reglogo.pg
		dw	fx_reglogo
		dw	fx_reglogo.sync

		db	fx_oneplusani.pg
		dw	fx_oneplusani
		dw	fx_oneplusani.length

		db	fx_oneplus.pg
		dw	fx_oneplus
		dw	fx_oneplus.sync

		db	fx_surprise.pg
		dw	fx_surprise
		dw	fx_surprise.sync

		db	fx_trafoutro.pg
		dw	fx_trafoutro
		dw	fx_trafoutro.length

		db	fx_transformy.pg
		dw	fx_transformy
		dw	fx_transformy.sync

		db	fx_greetings.pg
		dw	fx_greetings
		dw	fx_greetings.sync

		db	fx_turndisk.pg
		dw	fx_turndisk
		dw	fx_turndisk.length

		db	fx_ripple.pg
		dw	fx_ripple
		dw	fx_ripple.sync

		db	fx_finalpart.pg
		dw	fx_finalpart
		dw	fx_finalpart.sync

		db	0

;;-----------------------------------------------------------------------------
		align	256

im2vector:	block	257, 0


		org	im2vector

		block	257 - (attrhide.end - tempsp), 0

@tempsp

blocktable:	include "../haystack.inc"

attrhide:	ld	hl,22528
		ld	c,24
.atthd2:	ld	b,32
		push	bc
.atthd3:	ld	a,(hl)
		and	7
		jr	z,.atthd4
		dec	a
.atthd4:	push	af
		ld	a,(hl)
		and	56
		jr	z,.atthd5
		ld	c,8
		sub	c
		ld	c,a
		pop	af
		or	c
		jr	.atthd6
.atthd5:	ld	a,(hl)
		and	248
		ld	c,a
		pop	af
		or	c
.atthd6:	ld	(hl),a
		inc	hl
		djnz	.atthd3
		pop	bc
		dec	c
		jr	nz,.atthd2
		ret
.end = $

;;-----------------------------------------------------------------------------
		org	im2vector + 257

@kernel:	di
		ld	sp,basesp
		ld	hl,im2vector
		ld	a,h
		ld	i,a
		im	2
		ld	a,high interrupt
.mkim2:		ld	(hl),a
		inc	l
		jr	nz,.mkim2
		inc	h
		ld	(hl),a
; init music
		ld	a,MUSIC.page | #10
		call	xchg.bnk
		call	MUSIC.init
; clear both vrams
		ld	a,#17
		call	xchg.bnk
		ld	hl,#4000
		ld	de,#4001
		ld	bc,6911
		ld	(hl),l
		ldir
		ld	hl,#4000
		ld	d,#C0
		ld	b,high 6912
		ldir
		ld	(FRAMES),bc
		ld	a,#10
		call	xchg.bnk

.run:		ld	hl,fxtable
		ld	a,(hl)
		or	a
		jr	z,.end
		inc	l
		ld	e,(hl)
		inc	l
		ld	d,(hl)
		push	hl
		ex	de,hl
		ld	e,a
		and	#17
		ld	b,a
		ld	a,(act128page)
		and	#F8
		push	af
		or	b
		call	xchg.bnk
		bit	7,e
		jr	nz,.ldir
		ld	de,RUNZONE
		call	depack
		pop	af
		call	xchg.bnk
		pop	hl
		inc	l
		ld	e,(hl)
		inc	l
		ld	d,(hl)
		inc	l
		ld	(.run+1),hl
		call	RUNZONE
		jr	.run

.ldir:		pop	af
		ex	de,hl
		pop	hl
		inc	l
		ld	c,(hl)
		inc	l
		ld	b,(hl)
		inc	l
		ld	(.run+1),hl
		ex	de,hl
		ld	de,RUNZONE
		ldir
		call	xchg.bnk
		call	RUNZONE
		jr	.run

.end		ei
		halt
		jr	.end
@kernend

		align	256
@RUNZONE	equ	$
basesp

		org	kernend

screen.pak:	incbin "loading.pak"

total = $-start

	endmodule ; loader

		include "sinclairBASIC.inc"

		org	23755-17

; BASIC header
	tapout OUTPUT_TAP,0

		db	0
		db	'REGRESSION'
		dw	bas.total
		dw	1 ; start line
		dw	bas.total

	tapend

; BASIC block
	tapout OUTPUT_TAP

	module bas
line1:		db	0, 1
		dw	line1.len
line1.cmds	; POKE VAL "23624",NOT PI:
		db	C_POKE
		VAL	23624, ','
		db	C_NOT, C_PI, ':'
		; POKE VAL "23693",NOT PI:
		db	C_POKE
		VAL	23693, ','
		db	C_NOT, C_PI, ':'
		; CLEAR VAL "x":
		db	C_CLEAR
		VAL	loader.begin - 1, ':'
		; POKE VAL "23739",CODE "o":
		db	C_POKE
		VAL	23739, ','
		db	C_CODE, '"o":'
		; POKE VAL "23388",VAL "16":
		db	C_POKE
		VAL	23388, ','
		VAL	16, ':'
		; OUT VAL "32765",VAL "16"
		db	C_OUT
		VAL	32765, ','
		VAL	16, ':'
		; LOAD "loader" CODE:
		db	C_LOAD, '"loader"', C_CODE, ':'
		; RANDOMIZE USR VAL "x"
		db	C_RANDOMIZE, C_USR
		VAL	loader.begin, EOL
line1.len = $ - line1.cmds

line2:		db	0, 2
		dw	line2.len
line2.cmds	; FOR i=NOT PI TO VAL "8":
		db	C_FOR, 'i=', C_NOT, C_PI, C_TO
		VAL	8, ':'
		; LOAD "data0"+(STR$ i) CODE:
		db	C_LOAD, '"data0"+(', C_STRS, 'i)', C_CODE, ':'
		; RANDOMIZE USR VAL "x":
		db	C_RANDOMIZE, C_USR
		VAL	loader.processblock, ':'
		; NEXT i
		db	C_NEXT, 'i', EOL
line2.len = $ - line2.cmds

line3:		db	0, 3
		dw	line3.len
line3.cmds	; READ s
		db	C_READ, 's:'
		; POKE VAL "23388",s:
		db	C_POKE
		VAL	23388, ','
		db	's:'
		; OUT VAL "32765",s:
		db	C_OUT
		VAL	32765, ','
		db	's:'
		; LOAD "page"+(STR$ s) CODE:
		db	C_LOAD, '"page"+(', C_STRS, 's)', C_CODE, ':'
		; RANDOMIZE USR VAL "x":
		db	C_RANDOMIZE, C_USR
		VAL	loader.unpackpage, ':'
		; IF s <> VAL "23" THEN
		db	C_IF, 's', C_NOTEQ
		VAL	23, C_THEN
		; GO TO PI
		db	C_GOTO, C_PI, EOL
line3.len = $ - line3.cmds

line4:		db	0, 4
		dw	line4.len
line4.cmds	; RANDOMIZE USR VAL "x"
		db	C_RANDOMIZE, C_USR
		VAL	loader.fadeoutandrun, EOL
line4.len = $ - line4.cmds

line9:		db	0, 9
		dw	.len
line9.cmds	; DATA...
		db	C_DATA
		VAL	needle1, ','
		VAL	needle3, ','
		VAL	needle4, ','
		VAL	needle6, ','
		VAL	needle7, EOL
line9.len = $ - line9.cmds

total = $ - line1
	endmodule
	tapend

; loader block
		savetap OUTPUT_TAP, CODE, "loader", loader.begin, loader.total


;;-----------------------------------------------------------------------------
	macro putHaystack number?
@__putHaystack_number = number?
		lua allpass
			_pl("putHaystack"..tostring(_c('__putHaystack_number')))
		endlua

		tapout OUTPUT_TAP,0
			db	3 ;; BYTES
		lua allpass
			_pc("db 'data0"..tostring(_c('__putHaystack_number')).."    '")
		endlua
			dw	.filelength
			dw	0x8400	;; start address
			dw	0x8000
		tapend

		tapout OUTPUT_TAP
			org #8000
		lua allpass
			_pl(".filedata: incbin '../haystack.part"..tostring(_c('__putHaystack_number'))..".pak'")
		endlua
.filelength = $-.filedata
		tapend
	endm

	macro putNeedle number?, filename?
@__putNeedle_number = number?
		lua allpass
			_pl("putNeedle"..tostring(_c('__putNeedle_number')))
		endlua

		tapout OUTPUT_TAP,0
			db	3 ;; BYTES
		lua allpass
			_pc("db 'page"..tostring(_c('__putNeedle_number')).."    '")
		endlua
			dw	.filelength
			dw	0x8400	;; start address
			dw	0x8000
		tapend

		tapout OUTPUT_TAP
			org #8000
.filedata		incbin filename?
.filelength = $-.filedata
		tapend
	endm

		putHaystack 0
		putHaystack 1
		putHaystack 2
		putHaystack 3
		putHaystack 4
		putHaystack 5
		putHaystack 6
		putHaystack 7
		putHaystack 8

		putNeedle needle1,"../needle1.pak"
		putNeedle needle3,"../needle3.pak"
		putNeedle needle4,"../needle4.pak"
		putNeedle needle6,"../needle6.pak"
		putNeedle needle7,"../needle7.pak"

;;-----------------------------------------------------------------------------

		export page128
		export act128page
		export actborder
		export FRAMES
		export divmmcpg
		export MUSIC.page
		export MUSIC.init
		export MUSIC.play
		export kernel
		export IMCALL
		export RUNZONE
		export depack
		export xchg.vram
		export xchg.bnk
