		device	zxspectrum128

numberOfNeedles = 5
		include "pg1fx.inc"
		include "pg3fx.inc"
		include "pg4fx.inc"
		include "pg6fx.inc"
		include "pg7fx.inc"


page128		equ	#7FFD
act128page	equ	#5B5C
actborder	equ	#5C48
FRAMES		equ	23672
mb02ram		equ	#17


		org	#8000

@start:		di
		ld	sp,tempsp
		xor	a
		out	(254),a
		ld	(actborder),a
		ld	a,#10
		call	xchg.bnk
restart:	ld	hl,screen.pak
		ld	de,#4000
		call	depack

		ld	a,#61
		out	(mb02ram),a

loader:		ld	e,0	; (0 = root)
		ld	a,#14	; SETDIR
		rst	#20

		ld	hl,fn.haystack
		ld	e,#03
		ld	a,#19	; SEASX
		rst	#20
		jp	nz,error ; not found!

		ld	a,#12	; GETCST
		rst	#20
		ld	(.fcursor+1),hl
		ld	(needle.fcursor+1),hl

.fcursor:	ld	hl,0
.fpos:		ld	bc,0
		ld	ix,#C000
		ld	e,16
		ld	a,c
		add	a,e
		ld	(.fpos+1),a
		ld	a,#23	; LOA2X
		rst	#20

.blktabptr:	ld	hl,blocktable
.targetpg:	ld	bc,(blocktable.firstct << 8) | #64 ; SRAM page 4 (WR)
.depk6:		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		inc	hl
		push	hl
		ex	hl,de
		ld	de,0
		ld	a,c
		inc	c
		push	bc
		out	(mb02ram),a	; switch bank
		call	depack

.prgptr:	ld	hl,#55A1
		ld	(hl),#FF	; draw progress
		inc	l
		ld	(.prgptr+1),hl

		pop	bc
		pop	hl
		djnz	.depk6
		ld	(.blktabptr+1),hl

.countptr:	ld	hl,blocktable.counts
		ld	b,(hl)
		inc	hl
		ld	(.countptr+1),hl
		xor	a
		or	b
		jr	z,.fullfilprg-3
		ld	(.targetpg+1),bc
		ld	a,#61
		out	(mb02ram),a
		jr	.fcursor

		ld	hl,(.prgptr+1)
.fullfilprg:	ld	a,l
		cp	#BF
		jp	z,needle
		ld	(hl),#FF
		inc	l
		jr	.fullfilprg

needleprg:	ld	hl,#56A1 ; #5AA1
		ld	bc,((30 / numberOfNeedles) << 8) | #FF
.loop:		ld	(hl),c	; draw 2nd progress
		inc	l
		djnz	.loop
		ld	(needleprg+1),hl
		pop	af
		dec	a
		jp	nz,needle.loop

fadeout		ld	b,25
.loop:		ei
		halt
		halt
		push	bc
		call	attrhide
		pop	bc
		djnz	.loop
		jp	kernel

xchg.vram:	ld	a,#1D
		xor	#0A
		ld	(xchg.vram+1),a
xchg.bnk:	ld	(act128page),a
		ld	bc,page128
		out	(c),a
		ret

	if $ > #80C6
		display "Too long! ",/D,($-#80C6)," bytes out!"
	else
		display /D,(#80C6-$)," bytes free..."
	endif

		ds	(#80C6-$)

depack:	module dzx0
		include "dzx0.a80"
	endmod

;;- INTERRUPT -----------------------------------------------------------------
;		org	#8181

interrupt:	push	af		; demo-wide interrupt handler
		ld	a,(actborder)
		out	(254),a
		push	bc
		push	de
		push	hl
		exx
		ex	af,af'
		push	ix
		push	iy
		push	af
		push	bc
		push	de
		push	hl

@IMCALL		db	0,0,0

		ld	a,(act128page)
		push	af
		and	$F8		; we keep active VRAM paged
		or	MUSIC.page	; and switch bank just for music
		ld	bc,page128
		out	(c),a
		call	MUSIC.play
		pop	af
		ld	bc,page128
		out	(c),a

		ld	hl,(FRAMES)
		inc	hl
		ld	(FRAMES),hl

		pop	hl
		pop	de
		pop	bc
		pop	af
		pop	iy
		pop	ix
		ex	af,af'
		exx
		pop	hl
		pop	de
		pop	bc
		pop	af
		ei
		ret


fxtable:	db	fx_city.pg
		dw	fx_city
		dw	fx_city.sync

		db	fx_reglogo.pg
		dw	fx_reglogo
		dw	fx_reglogo.sync

		db	fx_oneplusani.pg
		dw	fx_oneplusani
		dw	fx_oneplusani.length

		db	fx_oneplus.pg
		dw	fx_oneplus
		dw	fx_oneplus.sync

		db	fx_surprise.pg
		dw	fx_surprise
		dw	fx_surprise.sync

		db	fx_trafoutro.pg
		dw	fx_trafoutro
		dw	fx_trafoutro.length

		db	fx_transformy.pg
		dw	fx_transformy
		dw	fx_transformy.sync

		db	fx_greetings.pg
		dw	fx_greetings
		dw	fx_greetings.sync

		db	fx_turndisk.pg
		dw	fx_turndisk
		dw	fx_turndisk.length

		db	fx_ripple.pg
		dw	fx_ripple
		dw	fx_ripple.sync

		db	fx_finalpart.pg
		dw	fx_finalpart
		dw	fx_finalpart.sync

		db	0

;;-----------------------------------------------------------------------------
		align	256

im2vector:	block	257, 0

	outend

		org	im2vector

	block	256 - (attrhide.end - txterr), 0

@tempsp
txterr		db	"LOADING FAILED!"
		dw	#C900

direntrybuf	equ	start
fn.needle:	db	"needle",0
fn.haystack:	db	"haystack  "
blocktable:	include "../haystack.inc"

needle:		ld	a,#61
		out	(mb02ram),a
		ld	a,numberOfNeedles
.loop:		push	af
.fcursor:	ld	bc,0
		inc	bc
		ld	(.fcursor+1),bc
		push	bc
		ld	ix,direntrybuf
		ld	a,#16	; GETSUB
		rst	#20
		jr	z,error

		ld	a,(ix+0)
		cp	#B0
		jr	nz,.invalidfile
		ld	xl,6
		ld	de,fn.needle
.fncompare:	ld	a,(de)
		or	a
		jr	z,.rightname
		cp	(ix+0)
		jr	nz,.invalidfile
		inc	e
		inc	xl
		jr	.fncompare

.invalidfile:	pop	af
		pop	af
		jr	.loop

.rightname:	ld	a,(ix+0)
		sub	('0' - #10)
		ld	(.targetpg+1),a
		ld	a,(ix+1)
		sub	' '
		jr	nz,error
.targetpg:	ld	a,0
		call	xchg.bnk
		ld	e,16
		ld	bc,0
		pop	hl
		ld	ix,#C000
		ld	a,#23	; LOA2X
		rst	#20
		jp	needleprg

error:		ld	hl,txterr
		ld	a,#34	;; MESSX
		rst	#20
		jp	c,restart
		rst	0

attrhide:	ld	hl,22528
		ld	c,24
.atthd2:	ld	b,32
		push	bc
.atthd3:	ld	a,(hl)
		and	7
		jr	z,.atthd4
		dec	a
.atthd4:	push	af
		ld	a,(hl)
		and	56
		jr	z,.atthd5
		ld	c,8
		sub	c
		ld	c,a
		pop	af
		or	c
		jr	.atthd6
.atthd5:	ld	a,(hl)
		and	248
		ld	c,a
		pop	af
		or	c
.atthd6:	ld	(hl),a
		inc	hl
		djnz	.atthd3
		pop	bc
		dec	c
		jr	nz,.atthd2
		ret
.end = $

;;-----------------------------------------------------------------------------
		align	256

		nop

kernel:		di
		ld	sp,basesp
		ld	hl,im2vector
		ld	a,h
		ld	i,a
		im	2
		ld	a,high interrupt
.mkim2:		ld	(hl),a
		inc	l
		jr	nz,.mkim2
		inc	h
		ld	(hl),a
; init music
		ld	a,MUSIC.page | #10
		call	xchg.bnk
		call	MUSIC.init
; clear both vrams
		ld	a,#17
		call	xchg.bnk
		ld	hl,#4000
		ld	de,#4001
		ld	bc,6911
		ld	(hl),l
		ldir
		ld	hl,#4000
		ld	d,#C0
		ld	b,high 6912
		ldir
		ld	(FRAMES),bc
		ld	a,#10
		call	xchg.bnk

.run:		ld	hl,fxtable
		ld	a,(hl)
		or	a
		jr	z,.end
		inc	l
		ld	e,(hl)
		inc	l
		ld	d,(hl)
		push	hl
		ex	de,hl
		ld	e,a
		and	#17
		ld	b,a
		ld	a,(act128page)
		and	#F8
		push	af
		or	b
		call	xchg.bnk
		bit	7,e
		jr	nz,.ldir
		ld	de,RUNZONE
		call	depack
		pop	af
		call	xchg.bnk
		pop	hl
		inc	l
		ld	e,(hl)
		inc	l
		ld	d,(hl)
		inc	l
		ld	(.run+1),hl
		call	RUNZONE
		jr	.run

.ldir:		pop	af
		ex	de,hl
		pop	hl
		inc	l
		ld	c,(hl)
		inc	l
		ld	b,(hl)
		inc	l
		ld	(.run+1),hl
		ex	de,hl
		ld	de,RUNZONE
		ldir
		call	xchg.bnk
		call	RUNZONE
		jr	.run

.end		ei
		halt
		jr	.end
@kernend

		align	256
@RUNZONE	equ	$
basesp

		org	kernend

screen.pak:	incbin "loading.pak"


		emptytap "REGRESSION.tap"
		savetap  "REGRESSION.tap",CODE,"REGRESSION",start,$-start


		export page128
		export act128page
		export actborder
		export FRAMES
		export mb02ram
		export MUSIC.page
		export MUSIC.init
		export MUSIC.play
		export kernel
		export IMCALL
		export RUNZONE
		export depack
		export xchg.vram
		export xchg.bnk
