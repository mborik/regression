		device	zxspectrum128
		include "../kernel/constants.inc"

needle1 	= 1 + #10
needle3 	= 3 + #10
needle4 	= 4 + #10
needle6 	= 6 + #10
needle7 	= 7 + #10
numberOfNeedles	= 5


		define OUTPUT_TAP "../build/REGRESSION.tap"
		emptytap OUTPUT_TAP


	module loader
		org	#8000-shift

begin:		ld	hl,screen.pak
		ld	de,#4000
		jr	depackld

processblock:	di
		ld	hl,#8000
		ld	de,#C000
		call	depackld
.blktabptr:	ld	hl,blocktable
.targetpg:	ld	bc,(blocktable.firstct << 8) | #64 ; SRAM page 4 (WR)
.depk6:		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		inc	hl
		push	hl
		ex	hl,de
		ld	de,0
		ld	a,c
		inc	c
		push	bc
		out	(mb02ram),a	; switch bank
		call	depackld

.prgptr:	ld	hl,#50A1
		ld	(hl),#FF	; draw progress
		inc	l
		ld	(.prgptr+1),hl

		pop	bc
		pop	hl
		djnz	.depk6
		ld	(.blktabptr+1),hl

.countptr:	ld	hl,blocktable.counts
		ld	b,(hl)
		inc	hl
		ld	(.countptr+1),hl
		xor	a
		out	(mb02ram),a
		or	b
		jr	z,fullfilprg
		ld	(.targetpg+1),bc
		ret

fullfilprg:	ld	hl,(processblock.prgptr+1)
.loop:		ld	a,l
		cp	#BF
		ret	z
		ld	(hl),#FF
		inc	l
		jr	.loop

unpackpage:	ld	hl,#51A1
		ld	bc,((30 / numberOfNeedles) << 8) | #FF
.pgprog:	ld	(hl),c	; draw progress
		inc	l
		djnz	.pgprog
		ld	(unpackpage+1),hl
		di
		ld	hl,#8000
		ld	de,#C000
		jr	depackld

fadeoutandrun:	ld	a,25
.loop:		ei
		halt
		halt
		ex	af,af'
		call	attrhide
		ex	af,af'
		dec	a
		jr	nz,.loop

		ld	hl,kernel.pak
		ld	de,#8000
		ld	bc,kernel
		push	bc

depackld
	module dzx0l
		include "../kernel/dzx0.a80"
	endmod

attrhide:	ld	hl,22528
		ld	c,24
.atthd2:	ld	b,32
		push	bc
.atthd3:	ld	a,(hl)
		and	7
		jr	z,.atthd4
		dec	a
.atthd4:	push	af
		ld	a,(hl)
		and	56
		jr	z,.atthd5
		ld	c,8
		sub	c
		ld	c,a
		pop	af
		or	c
		jr	.atthd6
.atthd5:	ld	a,(hl)
		and	248
		ld	c,a
		pop	af
		or	c
.atthd6:	ld	(hl),a
		inc	hl
		djnz	.atthd3
		pop	bc
		dec	c
		jr	nz,.atthd2
		ret

blocktable:	include "../haystack.inc"
kernel.pak:	incbin "final.pak"

shift = $-begin
screen.pak:	incbin "loading.pak"

total = $-begin
	endmodule


		include "sinclairBASIC.inc"

		org	23755-17

; BASIC header
	tapout OUTPUT_TAP,0

		db	0
		db	'REGRESSION'
		dw	bas.total
		dw	1 ; start line
		dw	bas.total

	tapend

; BASIC block
	tapout OUTPUT_TAP

	module bas
line1:		db	0, 1
		dw	line1.len
line1.cmds	; POKE VAL "23624",NOT PI:
		db	C_POKE
		VAL	23624, ','
		db	C_NOT, C_PI, ':'
		; POKE VAL "23693",NOT PI:
		db	C_POKE
		VAL	23693, ','
		db	C_NOT, C_PI, ':'
		; CLEAR VAL "x":
		db	C_CLEAR
		VAL	loader.begin - 1, ':'
		; POKE VAL "23739",CODE "o":
		db	C_POKE
		VAL	23739, ','
		db	C_CODE, '"o":'
		; POKE VAL "23388",VAL "16":
		db	C_POKE
		VAL	23388, ','
		VAL	16, ':'
		; OUT VAL "32765",VAL "16"
		db	C_OUT
		VAL	32765, ','
		VAL	16, ':'
		; LOAD "loader" CODE:
		db	C_LOAD, '"loader"', C_CODE, ':'
		; RANDOMIZE USR VAL "x"
		db	C_RANDOMIZE, C_USR
		VAL	loader.begin, EOL
line1.len = $ - line1.cmds

line2:		db	0, 2
		dw	line2.len
line2.cmds	; FOR i=NOT PI TO VAL "8":
		db	C_FOR, 'i=', C_NOT, C_PI, C_TO
		VAL	8, ':'
		; LOAD "data0"+(STR$ i) CODE:
		db	C_LOAD, '"data0"+(', C_STRS, 'i)', C_CODE, ':'
		; RANDOMIZE USR VAL "x":
		db	C_RANDOMIZE, C_USR
		VAL	loader.processblock, ':'
		; NEXT i
		db	C_NEXT, 'i', EOL
line2.len = $ - line2.cmds

line3:		db	0, 3
		dw	line3.len
line3.cmds	; READ s
		db	C_READ, 's:'
		; POKE VAL "23388",s:
		db	C_POKE
		VAL	23388, ','
		db	's:'
		; OUT VAL "32765",s:
		db	C_OUT
		VAL	32765, ','
		db	's:'
		; LOAD "page"+(STR$ s) CODE:
		db	C_LOAD, '"page"+(', C_STRS, 's)', C_CODE, ':'
		; RANDOMIZE USR VAL "x":
		db	C_RANDOMIZE, C_USR
		VAL	loader.unpackpage, ':'
		; IF s <> VAL "23" THEN
		db	C_IF, 's', C_NOTEQ
		VAL	23, C_THEN
		; GO TO PI
		db	C_GOTO, C_PI, EOL
line3.len = $ - line3.cmds

line4:		db	0, 4
		dw	line4.len
line4.cmds	; RANDOMIZE USR VAL "x"
		db	C_RANDOMIZE, C_USR
		VAL	loader.fadeoutandrun, EOL
line4.len = $ - line4.cmds

line9:		db	0, 9
		dw	.len
line9.cmds	; DATA...
		db	C_DATA
		VAL	needle1, ','
		VAL	needle3, ','
		VAL	needle4, ','
		VAL	needle6, ','
		VAL	needle7, EOL
line9.len = $ - line9.cmds

total = $ - line1
	endmodule
	tapend

; loader block
		savetap OUTPUT_TAP, CODE, "loader", loader.begin, loader.total


;;-----------------------------------------------------------------------------
	macro putHaystack number?
@__putHaystack_number = number?
		lua allpass
			_pl("putHaystack"..tostring(_c('__putHaystack_number')))
		endlua

		tapout OUTPUT_TAP,0
			db	3 ;; BYTES
		lua allpass
			_pc("db 'data0"..tostring(_c('__putHaystack_number')).."    '")
		endlua
			dw	.filelength
			dw	0x8000	;; start address
			dw	0x8000
		tapend

		tapout OUTPUT_TAP
			org #8000
		lua allpass
			_pl(".filedata: incbin 'haystack.pg"..tostring(_c('__putHaystack_number'))..".pak'")
		endlua
.filelength = $-.filedata
		tapend
	endm

	macro putNeedle number?, filename?
@__putNeedle_number = number?
		lua allpass
			_pl("putNeedle"..tostring(_c('__putNeedle_number')))
		endlua

		tapout OUTPUT_TAP,0
			db	3 ;; BYTES
		lua allpass
			_pc("db 'page"..tostring(_c('__putNeedle_number')).."    '")
		endlua
			dw	.filelength
			dw	0x8000	;; start address
			dw	0x8000
		tapend

		tapout OUTPUT_TAP
			org #8000
.filedata		incbin filename?
.filelength = $-.filedata
		tapend
	endm
;;-----------------------------------------------------------------------------

		putHaystack 0
		putHaystack 1
		putHaystack 2
		putHaystack 3
		putHaystack 4
		putHaystack 5
		putHaystack 6
		putHaystack 7
		putHaystack 8

		putNeedle needle1,"needle1.pak"
		putNeedle needle3,"needle3.pak"
		putNeedle needle4,"needle4.pak"
		putNeedle needle6,"needle6.pak"
		putNeedle needle7,"needle7.pak"
